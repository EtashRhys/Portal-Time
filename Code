import pygame
import random
import math

# Initialize Pygame
pygame.init()

# Set up display (force fullscreen with fix for Pydroid3)
try:
    screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
    WIDTH, HEIGHT = screen.get_size()
except AttributeError:
    pygame.display.init()
    screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
    WIDTH, HEIGHT = screen.get_size()
pygame.display.set_caption("Starry Night")

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
YELLOW = (255, 255, 200)
BLUE = (0, 100, 255)  # Blue for inactive button
GREEN = (0, 255, 0)    # Green for active button
PORTAL_COLOR = (10, 10, 20)  # Dark background for active portal
LIGHT_GRAY = (180, 180, 180)  # Light gray for star outline

# Star class for regular stars
class Star:
    def __init__(self):
        self.reset_position()
        self.base_size = random.uniform(1, 4)
        self.size = self.base_size
        self.brightness = random.randint(100, 255)
        self.twinkle_speed = random.uniform(0.5, 2)
        self.angle = 0
        self.radius = 0
        self.target_x = self.x
        self.target_y = self.y
        self.is_rim_star = False
        self.forming_outline = False

    def reset_position(self):
        self.x = random.randint(0, WIDTH)
        self.y = random.randint(0, HEIGHT)

    def twinkle(self):
        if self.forming_outline:
            return
        self.brightness += random.randint(-20, 20) * self.twinkle_speed
        self.brightness = max(150 if vortex_active and not self.forming_outline else 100, 
                            min(255, self.brightness))

    def update_vortex(self, vortex_active, center_x, center_y, forming_phase):
        if vortex_active:
            if self.radius == 0:
                dx = self.x - center_x
                dy = self.y - center_y
                self.radius = math.sqrt(dx*dx + dy*dy)
                self.angle = math.atan2(dy, dx)
                self.is_rim_star = random.random() < 0.5
                self.forming_outline = True
            
            min_radius = (min(WIDTH, HEIGHT) * 0.75) / 2
            rim_thickness = min_radius * 0.5
            rim_outer_edge = min_radius + rim_thickness
            
            if forming_phase:
                target_radius = rim_outer_edge
                self.radius += (target_radius - self.radius) * 0.1
                if abs(self.radius - target_radius) < 1:
                    self.forming_outline = False
            else:
                if self.is_rim_star:
                    if self.radius > rim_outer_edge:
                        self.radius *= 0.98
                    else:
                        self.radius = rim_outer_edge - random.uniform(0, rim_thickness)
                else:
                    if self.radius > rim_outer_edge:
                        self.radius *= 0.98
                    elif self.radius > min_radius:
                        self.radius *= 0.9995
                    else:
                        self.radius = min_radius
            
            self.angle += 0.25  # 50% slower rotation
            self.x = center_x + math.cos(self.angle) * self.radius
            self.y = center_y + math.sin(self.angle) * self.radius
            
            self.size = self.base_size * 1.5 if not self.forming_outline else self.base_size
        else:
            self.x += (self.target_x - self.x) * 0.1
            self.y += (self.target_y - self.y) * 0.1
            self.radius = 0
            self.is_rim_star = False
            self.forming_outline = False
            self.size = self.base_size

    def draw(self, surface, vortex_active, forming_phase):
        if vortex_active and forming_phase:
            color = LIGHT_GRAY
        else:
            color = (self.brightness, self.brightness, self.brightness)
        pygame.draw.circle(surface, color, (int(self.x), int(self.y)), int(self.size))

# Shooting star class
class ShootingStar:
    def __init__(self):
        if random.random() < 0.5:
            self.x = 0
            self.angle = random.uniform(0, 0.5)
        else:
            self.x = WIDTH
            self.angle = random.uniform(math.pi - 0.5, math.pi)
        self.y = random.randint(0, HEIGHT // 2)
        self.speed = random.uniform(10, 20)
        self.life = int(math.sqrt(WIDTH**2 + HEIGHT**2) / self.speed) + 10

    def move(self):
        self.x += math.cos(self.angle) * self.speed
        self.y += math.sin(self.angle) * self.speed
        self.life -= 1

    def draw(self, surface, vortex_active, center_x, center_y, portal_radius):
        if self.life > 0:
            end_x = self.x - math.cos(self.angle) * self.speed * 5
            end_y = self.y - math.sin(self.angle) * self.speed * 5
            if vortex_active:
                dist_start = math.sqrt((self.x - center_x)**2 + (self.y - center_y)**2)
                dist_end = math.sqrt((end_x - center_x)**2 + (end_y - center_y)**2)
                if dist_start > portal_radius and dist_end > portal_radius:
                    pygame.draw.line(surface, YELLOW, 
                                   (self.x, self.y), 
                                   (end_x, end_y), 
                                   2)
            else:
                pygame.draw.line(surface, YELLOW, 
                               (self.x, self.y), 
                               (end_x, end_y), 
                               2)

# Button class (now circular)
class Button:
    def __init__(self, text, x, y, radius):
        self.center = (x, y)
        self.radius = radius
        self.text = text
        self.font = pygame.font.SysFont(None, int(HEIGHT / 20))
        self.active = False

    def draw(self, surface):
        color = BLUE if not self.active else GREEN
        pygame.draw.circle(surface, color, self.center, self.radius)
        text_surf = self.font.render(self.text, True, WHITE)
        text_rect = text_surf.get_rect(center=self.center)
        surface.blit(text_surf, text_rect)

    def check_click(self, pos):
        # Check if click is within circle
        distance = math.sqrt((pos[0] - self.center[0])**2 + (pos[1] - self.center[1])**2)
        if distance <= self.radius:
            self.active = not self.active
            return True
        return False

# Create objects
stars = [Star() for _ in range(400)]
shooting_stars = []
button = Button("Portal Time", WIDTH // 2, HEIGHT - int(HEIGHT / 10), int(HEIGHT / 15))  # Circular, centered
vortex_active = False
forming_phase = False
forming_timer = 0

# Main game loop
clock = pygame.time.Clock()
running = True

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                running = False
        elif event.type == pygame.MOUSEBUTTONDOWN:
            if button.check_click(event.pos):
                vortex_active = button.active
                if vortex_active:
                    forming_phase = True
                    forming_timer = 60

    screen.fill(BLACK)

    # Vortex center at screen center
    center_x, center_y = WIDTH // 2, HEIGHT // 2
    portal_radius = (min(WIDTH, HEIGHT) * 0.75) / 2 + (min(WIDTH, HEIGHT) * 0.75) / 4

    # Draw portal background when active
    if vortex_active:
        pygame.draw.circle(screen, PORTAL_COLOR, (center_x, center_y), int(portal_radius))

    # Update forming phase timer
    if forming_phase and forming_timer > 0:
        forming_timer -= 1
        if forming_timer <= 0:
            forming_phase = False

    # Update and draw stars
    for star in stars:
        star.twinkle()
        star.update_vortex(vortex_active, center_x, center_y, forming_phase)
        star.draw(screen, vortex_active, forming_phase)

    # Handle shooting stars (only outside portal when active)
    if random.random() < 0.02:
        shooting_stars.append(ShootingStar())

    for s_star in shooting_stars[:]:
        s_star.move()
        s_star.draw(screen, vortex_active, center_x, center_y, portal_radius)
        if s_star.life <= 0 or s_star.x < -50 or s_star.x > WIDTH + 50 or s_star.y > HEIGHT + 50:
            shooting_stars.remove(s_star)

    # Draw button (circular, on top of everything)
    button.draw(screen)

    pygame.display.flip()
    clock.tick(60)

pygame.quit()
